[
  {
  "language":"Javascript",
  "data":[
  {
    "id": 1,
    "title": "Variables",
    "code": "let name = \"Alice\"; // Block-scoped, can be reassigned\nconst age = 30; // Block-scoped, cannot be reassigned",
    "description": "Use \"let\" for reassignable variables and \"const\" for constants."
  },
  {
    "id": 2,
    "title": "Data Types",
    "code": "let str = \"Hello\"; // Strings are text\nlet num = 42; // Numbers include integers and floats\nlet isTrue = true; // Booleans are true or false\nlet nothing = null; // Null represents intentional emptiness\nlet notDefined; // Undefined means a variable is declared but not assigned\nlet unique = Symbol(\"id\"); // Symbols are unique identifiers\nlet big = 9007199254740991n; // BigInt is for numbers larger than Number can hold\nlet obj = { key: \"value\" }; // Objects store key-value pairs",
    "description": "JavaScript has 8 data types: String, Number, Boolean, Null, Undefined, Symbol, BigInt, and Object."
  },
  {
    "id": 3,
    "title": "Type Coercion",
    "code": "console.log(5 + \"5\"); // \"55\" (number + string)\nconsole.log(5 - \"3\"); // 2 (string converted to number)\nconsole.log(\"5\" == 5); // true (loose equality converts types)\nconsole.log(\"5\" === 5); // false (strict equality checks type)",
    "description": "Loose equality (\"==\") converts types, while strict equality (\"===\") does not."
  },
  {
    "id": 4,
    "title": "Type Conversion",
    "code": "console.log(Number(\"42\")); // 42\nconsole.log(String(42)); // \"42\"\nconsole.log(Boolean(1)); // true\nconsole.log(parseInt(\"42px\")); // 42",
    "description": "Use \"Number()\", \"String()\", and \"Boolean()\" for explicit type conversion."
  },

    {
      "id": 5,
      "title": "Arithmetic Operators",
      "code": "let sum = 5 + 3;  // 8\nlet difference = 5 - 3;  // 2\nlet product = 5 * 3;  // 15\nlet quotient = 10 / 2;  // 5\nlet remainder = 10 % 3;  // 1 (remainder of division)\nlet power = 2 ** 3;  // 8 (2 raised to the power of 3)",
      "description": "Perform calculations like addition, subtraction, multiplication, and division."
    },

    {
      "id": 6,
      "title": "Comparison Operators",
      "code": "console.log(5 > 3);  // true\nconsole.log(5 >= 3);  // true (greater than or equal to)\nconsole.log(3 < 5);  // true\nconsole.log(3 <= 5);  // true (less than or equal to)\nconsole.log(5 === \"5\");  // false (strict equality, checks type too)\nconsole.log(5 == \"5\");  // true (loose equality, converts type)\nconsole.log(5 !== 3);  // true (not equal)",
      "description": "Used to compare values and check equality, inequality, and range."
    },
    {
      "id": 7,
      "title": "Logical Operators",
      "code": "console.log(5 > 3 && 8 > 4);  // true (AND)\nconsole.log(5 > 3 || 2 > 4);  // true (OR)\nconsole.log(!(5 > 3));  // false (NOT)",
      "description": "Used to combine multiple conditions."
    },
    {
      "id": 8,
      "title": "Assignment Operators",
      "code": "let x = 5;  // Assigns 5 to x\nx = 10;  // Reassigns 10 to x (previous value is overwritten)\nx += 3;  // Adds 3 to x (x = x + 3)\nx -= 2;  // Subtracts 2 from x (x = x - 2)\nx *= 4;  // Multiplies x by 4 (x = x * 4)\nx /= 2;  // Divides x by 2 (x = x / 2)\nx %= 3;  // Modulus: x = x % 3\nx **= 2;  // Raises x to the power of 2 (x = x ** 2)",
      "description": "Used to assign values to variables, perform operations on them, and reassign values."
    },
    {
      "id": 9,
      "title": "Conditional (Ternary) Operator",
      "code": "const age = 18;\nconst canVote = (age >= 18) ? 'Yes' : 'No';\nconsole.log(canVote);  // Output: 'Yes'",
      "description": "A shorthand for 'if-else' statements, used for conditional assignments."
    },
    {
      "id": 10,
      "title": "Typeof Operator",
      "code": "const name = 'Alice';\nconsole.log(typeof name);  // Output: 'string'\nconst age = 25;\nconsole.log(typeof age);  // Output: 'number'",
      "description": "Used to check the type of a variable or value."
    },
    {
      "id": 11,
      "title": "Instanceof Operator",
      "code": "const date = new Date();\nconsole.log(date instanceof Date);  // Output: true\nconsole.log(date instanceof Object);  // Output: true\nconsole.log(date instanceof Array);  // Output: false",
      "description": "Checks whether an object is an instance of a specific class or constructor function."
    },
    {
      "id": 12,
      "title": "Destructuring Assignment (Object)",
      "code": "const person = { name: 'Alice', age: 25 };\nconst { name, age } = person;\nconsole.log(name);  // Output: 'Alice'\nconsole.log(age);   // Output: 25",
      "description": "Extracts values from objects and assigns them to variables."
    },
    {
      "id": 13,
      "title": "Spread Operator",
      "code": "const arr1 = [1, 2, 3];\nconst arr2 = [...arr1, 4, 5];\nconsole.log(arr2);  // Output: [1, 2, 3, 4, 5]\nconst person = { name: 'Alice', age: 25 };\nconst newPerson = { ...person, city: 'New York' };\nconsole.log(newPerson);  // Output: { name: 'Alice', age: 25, city: 'New York' }",
      "description": "Allows iterables (like arrays or objects) to be expanded into individual elements."
    },
    {
      "id": 14,
      "title": "Rest Parameters",
      "code": "function sum(...numbers) {\n  return numbers.reduce((total, num) => total + num, 0);\n}\nconsole.log(sum(1, 2, 3, 4));  // Output: 10",
      "description": "Collects all remaining arguments into an array."
    },
    {
      "id": 15,
      "title": "Default Parameters",
      "code": "function greet(name = 'Guest') {\n  return `Hello, ${name}!`;\n}\nconsole.log(greet());       // Output: 'Hello, Guest!'\nconsole.log(greet('Alice'));  // Output: 'Hello, Alice!'",
      "description": "Allows functions to have default values for parameters if no value is passed."
    },
    {
      "id": 16,
      "title": "Template Literals",
      "code": "const name = 'Bob';\nconst greeting = `Hello, ${name}!`;\nconsole.log(greeting);  // Output: 'Hello, Bob!'",
      "description": "Provides a way to embed expressions inside string literals using `${ }`."
    },
    {
      "id": 17,
      "title": "Destructuring Assignment (Array)",
      "code": "const arr = [1, 2, 3];\nconst [a, b] = arr;\nconsole.log(a);  // Output: 1\nconsole.log(b);  // Output: 2",
      "description": "Extracts values from arrays and assigns them to variables."
    },

    {
      "id": 18,
      "title": "Function Expressions",
      "code": "const greet = function(name) {\n  return `Hello, ${name}!`;\n};\nconsole.log(greet('Alice'));  // Output: 'Hello, Alice!'",
      "description": "A function that is defined and assigned to a variable."
    },
    {
      "id": 19,
      "title": "Arrow Functions",
      "code": "const greet = (name) => `Hello, ${name}!`;\nconsole.log(greet('Alice'));  // Output: 'Hello, Alice!'",
      "description": "A concise way to write functions with an implicit return."
    },
    {
      "id": 20,
      "title": "For Loop",
      "code": "for (let i = 0; i < 5; i++) {\n  console.log(i); // Output: 0, 1, 2, 3, 4\n}",
      "description": "Repeats a block of code a set number of times based on a condition."
    },
    {
      "id": 21,
      "title": "While Loop",
      "code": "let i = 0;\nwhile (i < 5) {\n  console.log(i); // Output: 0, 1, 2, 3, 4\n  i++;\n}",
      "description": "Repeats a block of code as long as a specified condition is true."
    },
    {
      "id": 22,
      "title": "forEach (Array Method)",
      "code": "const arr = [1, 2, 3];\narr.forEach(num => console.log(num)); // Output: 1, 2, 3",
      "description": "Executes a provided function once for each array element."
    },
    {
      "id": 23,
      "title": "Fetch Call (Async/Await with try/catch)",
      "code": "async function fetchData() {\n  try {\n    const response = await fetch('https://api.example.com/data');\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    const data = await response.json();\n    console.log(data); // Process the data\n  } catch (error) {\n    console.error('There was a problem with the fetch operation:', error);\n  }\n}\nfetchData();",
      "description": "Fetch data from a URL with async/await syntax, handling errors using try/catch."
    },
    {
      "id": 24,
      "title": "Fetch: GET",
      "code": "async function fetchData() {\n  const response = await fetch('https://api.example.com/data');\n  const data = await response.json();\n  console.log(data); // Process the data\n}\nfetchData();",
      "description": "Retrieves data from a specified URL."
    },
    {
      "id": 25,
      "title": "Fetch: POST",
      "code": "async function postData() {\n  const response = await fetch('https://api.example.com/data', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ name: 'Alice', age: 30 })\n  });\n  const data = await response.json();\n  console.log(data); // Process the data\n}\npostData();",
      "description": "Sends data to the server, typically for creating or updating a resource."
    },
    {
      "id": 26,
      "title": "Fetch: PUT",
      "code": "async function putData() {\n  const response = await fetch('https://api.example.com/data/1', {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ name: 'Alice', age: 31 })\n  });\n  const data = await response.json();\n  console.log(data); // Process the data\n}\nputData();",
      "description": "Replaces a resource with new data."
    },
    {
      "id": 27,
      "title": "Fetch: DELETE",
      "code": "async function deleteData() {\n  const response = await fetch('https://api.example.com/data/1', {\n    method: 'DELETE'\n  });\n  const data = await response.json();\n  console.log(data); // Process the data\n}\ndeleteData();",
      "description": "Deletes a resource at the specified URL."
    },
    {
      "id": 28,
      "title": "Event Handling",
      "code": "const button = document.querySelector('button');\nbutton.addEventListener('click', () => {\n  alert('Button clicked!');\n});",
      "description": "Listens for and reacts to events."
    },
    {
      "id": 29,
      "title": "querySelectors",
      "code": "document.querySelector('.class-name'); // Selects by class\ndocument.querySelector('#id-name'); // Selects by ID\ndocument.querySelector('div'); // Selects by tag name\ndocument.querySelector('[data-attribute]'); // Selects by attribute",
      "description": "Different ways to select elements from the DOM."
    },
    {
      "id": 30,
      "title": "Array.prototype.map()",
      "code": "const numbers = [1, 2, 3];\nconst doubled = numbers.map(num => num * 2);\nconsole.log(doubled); // Output: [2, 4, 6]",
      "description": "Creates a new array by applying a function to each element."
    },
    {
      "id": 31,
      "title": "Array.prototype.filter()",
      "code": "const numbers = [1, 2, 3, 4, 5];\nconst evenNumbers = numbers.filter(num => num % 2 === 0);\nconsole.log(evenNumbers); // Output: [2, 4]",
      "description": "Creates a new array with elements that pass a test."
    },
    {
      "id": 32,
      "title": "Array.prototype.reduce()",
      "code": "const numbers = [1, 2, 3, 4];\nconst sum = numbers.reduce((total, num) => total + num, 0);\nconsole.log(sum); // Output: 10",
      "description": "Reduces the array to a single value using a function."
    },
    {
      "id": 33,
      "title": "Array.find()",
      "code": "const numbers = [1, 2, 3, 4, 5];\nconst firstEven = numbers.find(num => num % 2 === 0);\nconsole.log(firstEven); // Output: 2",
      "description": "Returns the first element that satisfies the test."
    },
    {
      "id": 34,
      "title": "Array.some()",
      "code": "const numbers = [1, 2, 3, 4];\nconst hasEven = numbers.some(num => num % 2 === 0);\nconsole.log(hasEven); // Output: true",
      "description": "Checks if at least one element passes the test."
    },
    {
      "id": 35,
      "title": "Array.every()",
      "code": "const numbers = [2, 4, 6];\nconst allEven = numbers.every(num => num % 2 === 0);\nconsole.log(allEven); // Output: true",
      "description": "Checks if all elements pass the test."
    },
    {
      "id": 36,
      "title": "Array.push()",
      "code": "const numbers = [1, 2, 3];\nnumbers.push(4);\nconsole.log(numbers); // Output: [1, 2, 3, 4]",
      "description": "Adds one or more elements to the end of an array."
    },
    {
      "id": 37,
      "title": "Array.pop()",
      "code": "const numbers = [1, 2, 3, 4];\nconst last = numbers.pop();\nconsole.log(last); // Output: 4\nconsole.log(numbers); // Output: [1, 2, 3]",
      "description": "Removes the last element from an array."
    },
    {
      "id": 38,
      "title": "Array.shift()",
      "code": "const numbers = [1, 2, 3];\nconst first = numbers.shift();\nconsole.log(first); // Output: 1\nconsole.log(numbers); // Output: [2, 3]",
      "description": "Removes the first element from an array."
    },
    {
      "id": 39,
      "title": "Array.unshift()",
      "code": "const numbers = [2, 3, 4];\nnumbers.unshift(1);\nconsole.log(numbers); // Output: [1, 2, 3, 4]",
      "description": "Adds one or more elements to the beginning of an array."
    },
    {
      "id": 40,
      "title": "Array.splice()",
      "code": "const numbers = [1, 2, 3, 4];\nnumbers.splice(2, 1, 5);\nconsole.log(numbers); // Output: [1, 2, 5, 4]",
      "description": "Adds or removes elements at a specific index."
    },
    {
      "id": 41,
      "title": "Array.reverse()",
      "code": "const numbers = [1, 2, 3];\nnumbers.reverse();\nconsole.log(numbers); // Output: [3, 2, 1]",
      "description": "Reverses the order of the elements in an array."
    },

      {
        "id": 42,
        "title": "Accessing Array by Index",
        "code": "const arr = [1, 2, 3, 4];\nconst item = arr[2];\nconsole.log(item); // Output: 3",
        "description": "Accesses an item from an array using its index."
      },
      {
        "id": 43,
        "title": "Accessing Object Property",
        "code": "const obj = { name: 'John', age: 30 };\nconst name = obj.name;\nconsole.log(name); // Output: 'John'",
        "description": "Accesses a property of an object using dot notation."
      },

      {
        "id": 44,
        "title": "Accessing Nested Object Property",
        "code": "const person = { name: 'John', address: { city: 'New York' } };\nconst city = person.address.city;\nconsole.log(city); // Output: 'New York'",
        "description": "Accesses a nested property inside an object."
      },
      {
        "id": 45,
        "title": "Accessing Array of Objects",
        "code": "const users = [{ name: 'John' }, { name: 'Jane' }];\nconst userName = users[1].name;\nconsole.log(userName); // Output: 'Jane'",
        "description": "Accesses a property of an object within an array."
      },

      {
        "id": 46,
        "title": "Checking if an Array Includes a Value",
        "code": "const arr = [1, 2, 3, 4];\nconsole.log(arr.includes(2)); // Output: true",
        "description": "Checks if an array contains a value."
      },

      {
        "id": 47,
        "title": "Promises & Chaining",
        "code": "fetch(\"https://api.example.com/data\")\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error(error));",
        "description": "Handles async operations with \".then()\" chaining and \".catch()\" for errors."
      },
      {
        "id": 48,
        "title": "JavaScript Classes",
        "code": "class Person {\n  constructor(name, age) {\n    this.name = name;\n    this.age = age;\n  }\n  greet() {\n    return `Hello, my name is ${this.name}.`;\n  }\n}\n\nconst person1 = new Person('Alice', 30);\nconsole.log(person1.greet()); // Output: Hello, my name is Alice.",
        "description": "Defines a class with a constructor and a method."
      },

      {
        "id": 49,
        "title": "Class Inheritance",
        "code": "class Animal {\n  constructor(name) {\n    this.name = name;\n  }\n  makeSound() {\n    return 'Some generic sound';\n  }\n}\n\nclass Dog extends Animal {\n  makeSound() {\n    return 'Woof!';\n  }\n}\n\nconst dog = new Dog('Buddy');\nconsole.log(dog.makeSound()); // Output: Woof!",
        "description": "A class can inherit from another class and override methods."
      }]
  },
  {
    "language": "Vue",
    "data":[
      {
        "id": 50,
        "title": "Vue Instance",
        "code": "import { createApp } from 'vue'\nimport App from './App.vue'\n\nconst app = createApp(App)\napp.mount('#app')",
        "description": "Create a Vue app instance and mount it to a DOM element."
      },
        {
          "id": 51,
          "title": "Data Binding",
          "code": "<template>\n  <p>{{ message }}</p>\n</template>\n\n<script setup>\nimport { ref } from 'vue'\n\nconst message = ref('Hello, Vue!')\n</script>",
          "description": "Bind data to the DOM using Vue's template syntax to dynamically display values."
        },
        {
          "id": 52,
          "title": "Vue Component Structure",
          "code": "<template>\n  <p>{{ message }}</p>\n</template>\n\n<script setup>\n  import { ref } from 'vue'\n  const message = ref('Hello from the template!')\n</script>\n\n<style scoped>\n  p {\n    color: blue;\n  }\n</style>",
          "description": "A Vue component consists of three main parts: the template (HTML), script (JavaScript), and style (CSS). The script setup simplifies component logic, and scoped styles ensure the styles only apply to this component."
        },
        {
          "id": 53,
          "title": "Variables and ref",
          "code": "<template>\n  <p>{{ count }}</p>\n  <button @click=\"increment\">Increment</button>\n</template>\n\n<script setup>\nimport { ref } from 'vue'\n\nconst count = ref(0)\nconst increment = () => count.value++\n</script>",
          "description": "Use `ref` to create reactive variables. Update their value with `.value`."
        },
        {
          "id": 54,
          "title": "Computed Properties",
          "code": "<template>\n  <p>{{ message }}</p>\n  <!-- Output: Hello -->\n  <p>Reversed: {{ reversedMessage }}</p>\n  <!-- Output: olleH -->\n</template>\n\n<script setup>\nimport { ref, computed } from 'vue'\n\nconst message = ref('Hello')\nconst reversedMessage = computed(() => \n  message.value.split('').reverse().join('')\n)\n</script>",
          "description": "Use `computed` for values that depend on reactive data."
        },
        {
          "id": 55,
          "title": "Watchers",
          "code": "<template>\n  <p>{{ count }}</p>\n  <button @click=\"increment\">Increment</button>\n</template>\n\n<script setup>\nimport { ref, watch } from 'vue'\n\nconst count = ref(0)\n\nwatch(count, (newCount, oldCount) => {\n  console.log(`Count changed from ${oldCount} to ${newCount}`)\n})\n\nconst increment = () => count.value++\n</script>",
          "description": "Use `watch` to watch for changes in reactive variables."
        },
        {
          "id": 56,
          "title": "v-if and v-else",
          "code": "<template>\n  <p v-if=\"isVisible\">Visible</p>\n  <p v-else>Hidden</p>\n  <button @click=\"toggleVisibility\">Toggle Visibility</button>\n</template>\n\n<script setup>\nimport { ref } from 'vue'\n\nconst isVisible = ref(true)\n\nconst toggleVisibility = () => {\n  isVisible.value = !isVisible.value\n}\n</script>",
          "description": "Use `v-if` to conditionally render elements based on a reactive variable. `v-else` provides an alternative when the condition is false."
        },
        {
          "id": 57,
          "title": "v-for",
          "code": "<template>\n  <ul>\n    <li v-for=\"item in items\" :key=\"item.id\">{{ item.name }}</li>\n  </ul>\n</template>\n\n<script setup>\nimport { ref } from 'vue'\n\nconst items = ref([\n  { id: 1, name: 'Item 1' },\n  { id: 2, name: 'Item 2' }\n])\n</script>",
          "description": "Use `v-for` to loop through an array and render list items. Don't forget to provide a unique `key` for each item."
        },
        {
          "id": 58,
          "title": "v-bind",
          "code": "<template>\n  <img v-bind:src=\"imageSrc\" alt=\"Image\" />\n  <button v-bind:disabled=\"isDisabled\">Click me</button>\n</template>\n\n<script setup>\nimport { ref } from 'vue'\n\nconst imageSrc = ref('https://example.com/image.jpg')\nconst isDisabled = ref(false)\n</script>",
          "description": "Use `v-bind` to dynamically bind an attribute, like `src` or `disabled`, to a reactive variable."
        },
        {
          "id": 59,
          "title": "v-bind: style and class",
          "code": "<template>\n  <div v-bind:style=\"{ color: textColor }\">\n    Styled Text\n  </div>\n  <div v-bind:class=\"{ active: isActive }\">\n    Styled with Class\n  </div>\n</template>\n\n<script setup>\nimport { ref } from 'vue'\n\nconst textColor = ref('blue')\nconst isActive = ref(true)\n</script>",
          "description": "Use `v-bind:style` and `v-bind:class` with object syntax."
        },
        {
          "id": 60,
          "title": "v-model",
          "code": "<template>\n  <input v-model=\"text\" />\n  <p>{{ text }}</p>\n</template>\n\n<script setup>\nimport { ref } from 'vue'\n\nconst text = ref('')\n</script>",
          "description": "Use `v-model` for two-way data binding between an input and a variable."
        },
        {
          "id": 61,
          "title": "v-show",
          "code": "<template>\n  <p v-show=\"isVisible\">This text is visible</p>\n  <button @click=\"toggleVisibility\">Toggle Visibility</button>\n</template>\n\n<script setup>\nimport { ref } from 'vue'\n\nconst isVisible = ref(true)\n\nconst toggleVisibility = () => {\n  isVisible.value = !isVisible.value\n}\n</script>",
          "description": "Use `v-show` to conditionally display an element without removing it from the DOM."
        },
        {
          "id": 62,
          "title": "Props",
          "code": "<template>\n  <!-- Parent Component -->\n  <ChildComponent :message=\"parentMessage\" />\n</template>\n\n<script setup>\nimport { ref } from 'vue'\nimport ChildComponent from './ChildComponent.vue'\n\nconst parentMessage = ref('Hello from Parent!')\n</script>\n\n<!-- Child Component -->\n<template>\n  <p>{{ message }}</p>\n</template>\n\n<script setup>\ndefineProps(['message'])\n</script>",
          "description": "Use `props` to pass data from a parent component to a child component. The child can access the passed data using `defineProps`."
        },
        {
          "id": 63,
          "title": "Custom Events",
          "code": "<template>\n  <!-- Parent Component -->\n  <ChildComponent @messageSent=\"handleMessage\" />\n  <p>{{ message }}</p>\n</template>\n\n<script setup>\nimport { ref } from 'vue'\nimport ChildComponent from './ChildComponent.vue'\n\nconst message = ref('')\n\nconst handleMessage = (msg) => {\n  message.value = msg\n}\n</script>\n\n<!-- Child Component -->\n<template>\n  <button @click=\"sendMessage\">Send Message</button>\n</template>\n\n<script setup>\ndefineEmits(['messageSent'])\n\nconst sendMessage = () => {\n  emit('messageSent', 'Hello from Child!')\n}\n</script>",
          "description": "Use `emit` in the child component to send custom events, and use `@event` in the parent to listen for those events."
        },
        {
          "id": 64,
          "title": "Slots",
          "code": "<template>\n  <!-- Parent Component -->\n  <ChildComponent>\n    <p>This is content passed from the parent!</p>\n  </ChildComponent>\n</template>\n\n<script setup>\nimport ChildComponent from './ChildComponent.vue'\n</script>\n\n<!-- Child Component -->\n<template>\n  <div>\n    <slot></slot>\n  </div>\n</template>",
          "description": "Use `slot` in the child component to allow content to be passed from the parent."
        },
        {
          "id": 65,
          "title": "Prop Validation",
          "code": "<script setup>\nimport { defineProps } from 'vue'\n\nconst props = defineProps({\n  age: {\n    type: Number,\n    required: true,\n    validator(value) {\n      return value >= 18\n    }\n  }\n})\n</script>",
          "description": "Use prop validation to specify type, required status, and custom validators for props in Vue components."
        },
        {
          "id": 66,
          "title": "onMounted",
          "code": "<script setup>\nimport { onMounted } from 'vue'\n\nonMounted(() => {\n  console.log('Component is mounted!')\n})\n</script>",
          "description": "Use `onMounted` to run code when the component is mounted (after the DOM is created)."
        },
        {
          "id": 67,
          "title": "onUpdated",
          "code": "<script setup>\nimport { onUpdated } from 'vue'\n\nonUpdated(() => {\n  console.log('Component has been updated!')\n})\n</script>",
          "description": "Use `onUpdated` to run code whenever the component's reactive data changes and the component re-renders."
        },
        {
          "id": 68,
          "title": "onCreated",
          "code": "<script setup>\nimport { onCreated } from 'vue'\n\nonCreated(() => {\n  console.log('Component is created!')\n})\n</script>",
          "description": "Use `onCreated` to run code when the component is created, before it is mounted to the DOM."
        },
        {
          "id": 69,
          "title": "Router Setup",
          "code": "<script setup>\nimport { createApp } from 'vue'\nimport { createRouter, createWebHistory } from 'vue-router'\n\n// Import components\nimport Home from './views/Home.vue'\nimport About from './views/About.vue'\n\n// Define routes\nconst routes = [\n  { path: '/', component: Home },\n  { path: '/about', component: About }\n]\n\n// Create router instance\nconst router = createRouter({\n  history: createWebHistory(),\n  routes,\n})\n\n// Create Vue app and use router\nconst app = createApp(App)\napp.use(router)\napp.mount('#app')</script>",
          "description": "Set up Vue Router by defining routes and creating a router instance with `createRouter` and `createWebHistory`. Use `app.use(router)` to add it to your Vue app."
        },
        {
          "id": 70,
          "title": "Route Parameters",
          "code": "<script setup>\nimport { createApp } from 'vue'\nimport { createRouter, createWebHistory } from 'vue-router'\nimport User from './views/User.vue'\n\n// Define routes with dynamic parameter\nconst routes = [\n  { path: '/user/:id', component: User }\n]\n\n// Create router instance\nconst router = createRouter({\n  history: createWebHistory(),\n  routes,\n})\n\n// Create Vue app and use router\nconst app = createApp(App)\napp.use(router)\napp.mount('#app')</script>",
          "description": "Use dynamic route parameters (e.g. `/user/:id`) to pass data through the URL. Access the parameter in the component using `this.$route.params.id` or `useRoute().params.id`."
        },
        {
          "id": 71,
          "title": "Programmatic Navigation",
          "code": "<script setup>\nimport { ref } from 'vue'\nimport { useRouter } from 'vue-router'\n\nconst router = useRouter()\nconst navigateToAbout = () => {\n  router.push('/about')\n}\n\nconst navigateToHome = () => {\n  router.push('/')\n}</script>",
          "description": "Use `router.push()` or `router.replace()` for programmatic navigation between routes. This allows you to navigate from within your components, based on user actions or logic."
        },
        {
          "id": 72,
          "title": "router-link and router-view",
          "code": "<template>\n  <!-- Using router-link for navigation -->\n  <router-link to='/'>Home</router-link>\n  <router-link to='/about'>About</router-link>\n\n  <!-- Where the routed components will render -->\n  <router-view></router-view>\n</template>",
          "description": "Use `<router-link>` for navigation between routes and `<router-view>` to render matched components. `<router-link>` is the declarative way to navigate, while `<router-view>` is where the components will be displayed."
        }
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
      
      
    ]
    
  }
  






    ]
